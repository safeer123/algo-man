=> Docker -> packages all application and its dependancies, 
=> runs in a loosely isolated environment called --> Container
=> container is built from a blueprint --> Docker Image
=> Docker container is built using linux kernel
=> image is built using multiple layers for re-usability of the image
=> Docker Registry --> repository of images
=> Docker runs a server --> Docker Daemon 
    - which can pull image, build image and run containers
=> Docker Daemon is accessed by --> Docker Client (CLI)
=> Docker Client can interact with Docker Daemon in the local machine or remote


---------- commands ---------

docker run <image>:<version>
/* runs a container from image - first it will look for local image - otherwise pulls
from the remote registry and add it to local registry and runs the container
if version not specified it takes "latest" as default
container will be called by some unique name, also there is an unique ID
*/

docker pull <image>
/* pulls image */

docker run -it <image> bash
/* runs the container and also provides a bash interface to interact with the container
Container is like a tiny virtual linux machine
*/

docker ps
/* list of all running containers */

docker ps -a
/* list of all running and exited containers */

docker exec -it <container id/name> bash
/* jump into a running containers bash */

docker start <container_id>
/* start a container with its unique ID. we can run an exited container back again */

docker stop <container_id>
/* stops the container */

docker rename <container_id|name> <new_name>
/* rename the container, name or id can be used in most of the commands */

docker rm -f <container_id|name>
/* Forcefully delete the container. make sure it is not running */

docker run --name <name_of_container> -it <image> bash
/* run an image with name of the container and interact with shell */

docker commit -m "<message>"

docker images
/* list of all images in the local registry */